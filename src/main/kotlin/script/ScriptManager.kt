package script

import client.MapleClient
import network.packet.ScriptMan
import script.binding.ScriptNpc
import script.binding.ScriptPortal
import server.MaplePortal
import server.life.MapleNPC
import java.io.File
import java.io.FileNotFoundException
import java.io.FileReader
import java.util.concurrent.Executors
import javax.script.ScriptEngineManager
import javax.script.ScriptException


class ScriptManager {

    companion object {

        val engine = ScriptEngineManager().getEngineByExtension("groovy")!!
        private var directory = ""
        private var script: File? = null
        private val pool = Executors.newCachedThreadPool()

        /**
         * @param client
         * @param npc
         * @param name either the actual script name or the npcId
         */
        fun runNpcScript(client: MapleClient, npc: MapleNPC, name: String) {
            directory = "./scripts/npc"
            val scriptName = String.format(
                "%s/%s%s", directory,
                name, ".groovy"
            )
            val scriptFile = File(scriptName)
            val exists: Boolean = scriptFile.exists()

            if (!exists) {
                val autoGenScript = AutoGeneratedNpcScriptTemplate(npc, client, name)
                sendMissingScriptPrompt(client, npc.id)
                try {
                    autoGenScript.create()
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            } else {
                script = scriptFile

                try {
                    pool.submit {
                        engine.put("npc", ScriptNpc(npc, client))
                        engine.eval(script?.let { FileReader(it) })
                    }
                } catch (se: ScriptException) {
                    se.printStackTrace()
                } catch (fnfe: FileNotFoundException) {
                    fnfe.printStackTrace()
                }
            }
        }

        fun runPortalScript(client: MapleClient, portal: MaplePortal) {
            directory = "./scripts/portal"
            val scriptName = String.format(
                "%s/%s%s", directory,
                portal.scriptName, ".groovy"
            )
            val scriptFile = File(scriptName)
            val exists: Boolean = scriptFile.exists()

            if (!exists) {
                val autoGenScript = AutoGeneratedPortalScriptTemplate(portal, client)
                sendMissingScriptPrompt(client, 9010000)
                try {
                    autoGenScript.create()
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            } else {
                script = scriptFile

                try {
                    pool.submit {
                        engine.put("portal", ScriptPortal(portal, client))
                        engine.eval(script?.let { FileReader(it) })
                    }
                } catch (se: ScriptException) {
                    se.printStackTrace()
                } catch (fnfe: FileNotFoundException) {
                    fnfe.printStackTrace()
                }
            }
        }


        /**
         * If a script doesn't exist we send this simple message to notify the user.
         *
         * @param client
         * @param templateId map object that is missing a script
         */
        private fun sendMissingScriptPrompt(client: MapleClient, templateId: Int) {
            client.announce(
                ScriptMan.onSay(
                    templateId,
                    "The following NPC does not have a script. Therefore, a temporary script will now be generated.",
                    back = false,
                    next = false
                )
            )
        }
    }
}

