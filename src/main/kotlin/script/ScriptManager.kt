package script

import client.MapleClient
import network.packet.ScriptMan
import script.binding.ScriptNpc
import script.binding.ScriptPortal
import server.MaplePortal
import server.life.MapleNPC
import server.maps.MapleMapObject
import java.io.File
import java.io.FileNotFoundException
import java.io.FileReader
import java.util.concurrent.Executors
import javax.script.ScriptEngineManager
import javax.script.ScriptException


class ScriptManager {

    companion object {

        val engine = ScriptEngineManager().getEngineByExtension("groovy")!!
        private var directory = ""
        private var script: File? = null
        private val pool = Executors.newCachedThreadPool()

        /**
         * @param client
         * @param objectId
         * @param name either the actual script name or the npcId
         * @param type
         */
        fun runScript(client: MapleClient, objectId: Int, name: String, type: ScriptType) {
            directory = "./scripts/$type"
            val scriptName = String.format(
                "%s/%s%s", directory,
                name, ".groovy"
            )
            val scriptFile = File(scriptName)
            val exists: Boolean = scriptFile.exists()

            if (!exists) {
                handleMissingScript(client, objectId, name, type)
            } else {
                script = scriptFile

                try {
                    pool.submit {
                        if (type == ScriptType.Npc) {
                            engine.put("npc", ScriptNpc(client.player.map.getMapObject(objectId) as MapleNPC, client))
                        }
                        if (type == ScriptType.Portal) {
                            engine.put("portal", ScriptPortal(client.player.map.getPortal(objectId), client))
                        }
                        engine.put("user", client.player)
                        engine.eval(script?.let { FileReader(it) })
                    }
                } catch (se: ScriptException) {
                    se.printStackTrace()
                } catch (fnfe: FileNotFoundException) {
                    fnfe.printStackTrace()
                }
            }
        }

        private fun handleMissingScript(client: MapleClient, objectId: Int, name: String, type: ScriptType) {
            val autoGenScript: Any?
            when (type) {
                ScriptType.None -> {}
                ScriptType.Npc -> {
                    autoGenScript = AutoGeneratedNpcScriptTemplate(
                        client.player.map.getMapObject(objectId) as MapleNPC,
                        client,
                        name
                    )
                    autoGenScript.create()
                }

                ScriptType.Field -> TODO()
                ScriptType.FirstEnterField -> TODO()
                ScriptType.Portal -> {
                    autoGenScript = AutoGeneratedPortalScriptTemplate(
                        client.player.map.getPortal(objectId),
                        client
                    )
                    autoGenScript.create()
                }

                ScriptType.Reactor -> TODO()
                ScriptType.Item -> TODO()
                ScriptType.Quest -> TODO()
            }

            client.announce(
                ScriptMan.onSay(
                    9010000, // maple admin npc
                    "The following map object does not have a script. Therefore, a temporary script will now be generated.",
                    back = false,
                    next = false
                )
            )
        }
    }
}