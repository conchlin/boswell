package script

import client.MapleClient
import network.packet.ScriptMan
import script.binding.*
import server.MapleItemInformationProvider
import server.life.MapleNPC
import server.quest.MapleQuest
import java.io.File
import java.io.FileNotFoundException
import java.io.FileReader
import java.util.concurrent.Executors
import javax.script.ScriptEngineManager
import javax.script.ScriptException


class ScriptManager {

    companion object {

        val engine = ScriptEngineManager().getEngineByExtension("groovy")!!
        private var directory = ""
        private var script: File? = null
        private val pool = Executors.newCachedThreadPool()

        /**
         * @param client
         * @param objectId
         * @param name either the actual script name or the npcId
         * @param st
         */
        fun runScript(client: MapleClient, objectId: Int, name: String, st: ScriptType) {
            directory = "./scripts/${st.type}"
            val scriptName = String.format(
                "%s/%s%s", directory,
                name, ".groovy"
            )
            val scriptFile = File(scriptName)
            val exists: Boolean = scriptFile.exists()

            if (!exists) {
                handleMissingScript(client, objectId, name, st)
            } else {
                script = scriptFile

                try {
                    pool.submit {
                        if (st == ScriptType.Npc) {
                            engine.put("npc", ScriptNpc(client.player.map.getMapObject(objectId) as MapleNPC, client))
                        }
                        if (st == ScriptType.Portal) {
                            engine.put("portal", ScriptPortal(client.player.map.getPortal(objectId), client))
                        }
                        if (st == ScriptType.Reactor) {
                            engine.put(
                                "reactor",
                                ScriptReactor(client.player.map.getReactorById(objectId), client)
                            )
                        }
                        if (st == ScriptType.Item) {
                            val ii = MapleItemInformationProvider.getInstance()
                            val info = ii.getScriptedItemInfo(objectId) // item id in this case
                            engine.put("item", ScriptItem(info, client))
                        }
                        engine.put("user", client.player)
                        engine.put("field", ScriptField(client.player.map, client))
                        engine.eval(script?.let { FileReader(it) })
                    }
                } catch (se: ScriptException) {
                    se.printStackTrace()
                } catch (fnfe: FileNotFoundException) {
                    fnfe.printStackTrace()
                }
            }
        }

        private fun handleMissingScript(client: MapleClient, objectId: Int, name: String, type: ScriptType) {
            val autoGenScript: Any?
            when (type) {
                ScriptType.None -> {}
                ScriptType.Npc -> {
                    autoGenScript = AutoGeneratedNpcScriptTemplate(
                        client.player.map.getMapObject(objectId) as MapleNPC,
                        client,
                        name
                    )
                    autoGenScript.create()
                }

                ScriptType.UserEnterField -> { // onUserEnter
                    autoGenScript = AutoGeneratedFieldScriptTemplate(
                        client.player.map,
                        client,
                        name,
                        false
                    )
                    autoGenScript.create()
                }

                ScriptType.FirstEnterField -> {
                    autoGenScript = AutoGeneratedFieldScriptTemplate(
                        client.player.map,
                        client,
                        name,
                        true
                    )
                    autoGenScript.create()
                }

                ScriptType.Portal -> {
                    autoGenScript = AutoGeneratedPortalScriptTemplate(
                        client.player.map.getPortal(objectId),
                        client
                    )
                    autoGenScript.create()
                }

                ScriptType.Reactor -> {
                    autoGenScript = AutoGeneratedReactorScriptTemplate(
                        client.player.map.getReactorById(objectId),
                        client
                    )
                    autoGenScript.create()
                }

                ScriptType.Item -> {
                    val ii = MapleItemInformationProvider.getInstance()
                    val info = ii.getScriptedItemInfo(objectId) // item id in this case
                    autoGenScript = AutoGeneratedItemScriptTemplate(info, client)
                    autoGenScript.create()
                }
                ScriptType.Quest -> {
                    autoGenScript = AutoGeneratedQuestScriptTemplate(
                        client.player.getQuest(MapleQuest.getInstance(objectId)),
                        client
                    )
                    autoGenScript.create()
                }
            }
            if (type == ScriptType.UserEnterField || type == ScriptType.FirstEnterField) {
                // treating field differently to prevent DC
                client.player.message("The following map object does not have a script. Therefore, a temporary script will now be generated.")
            } else {
                client.announce(
                    ScriptMan.onSay(
                        9010000, // maple admin npc
                        "The following map object does not have a script. Therefore, a temporary script will now be generated.",
                        back = false,
                        next = false
                    )

                )
            }
        }
    }
}